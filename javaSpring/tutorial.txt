- Creare un jar

	mvn install 
	java -jar target/<nome>.jar

- Eseguire il jar

	java -jar <nome>.jar
__________________________________________

SPRING-BOOT

1) Creare un archivio e estrarlo

	https://start.spring.io

2) Inserire le dipendenze in fase di creazione

	- Spring Web
	- Thymeleaf
	- Spring Data JPA
	- MySQL Driver

3) Eseguire sul server

	mvn spring-boot:run

________________________________________________________

// MODEL

package com.example.student.model;

	@Entity
	public class Student {

		@Id
		@GeneratedValue

		Long id;
		...
	}

// VIEW
	
	- th:each="s:${set}" --> permette di iterare su tutti i record (READ)
	- th:text="${s.id}" --> mostra un campo di un'oggetto (SPAN)
	- th:value="${s.id}" --> inizializza un campo da passare (HIDDEN-ID)

	- th:object="${obj}" --> imposta l'oggeto di contesto
	- th:field="*{obj.name}" --> accesso ai campi dell'oggetto di contesto (UPDATE)

	// READ
	<form action="/form" method="POST" th:each="student:${Students}">
        ID: <span th:text="${student.id}"></span> - Nome: <span th:text=".."></span>
        ...
        <input type="submit" name="action" value="Modifica">
		...
        <input type="hidden" name="id" th:value="${student.id}"/>
    </form>

    // UPDATE
	<form action="/update" method="POST" th:object="${student}">
		Name:<input type="text" th:field="*{name}"><br>
		.....
	    <button type="submit">Salva modifiche</button>
	    <input type="hidden" th:field="*{id}"/> 
	</form>

// CONTROLLER
	
	package com.example.student.controller;

	@Controller
	public class StudentContoller {

		final StudentRepository repo;

		...
		
    // Home
    @GetMapping("/")
    public String index() {
        return "index"; // Template "index.html"
    }

    // Read
    @GetMapping("/read")
    public String read(Model model) {
        model.addAttribute("Students", repo.findAll());
        return "read";
    }

    // Insert
    @PostMapping("/insert")
    public String insert(Student student) {
        repo.save(student);
        return "redirect:/read";
    }

    // Delete or Update
    @PostMapping("/form")
    public String form(@RequestParam String action, @RequestParam Long id, Model model) {

        if (action.equals("Modifica")) {
            Student student = repo.findById(id).orElse(null); // Find record in databse
            model.addAttribute("student", student); // Pass record to the form for update
            return "update";
        }
        if (action.equals("Rimuovi")) {
            repo.deleteById(id);
            return "redirect:/read";
        }

        return "read";
    }

    // Update (same code of Insert)
    @PostMapping("/update")
    public String update(Student student) {
        repo.save(student);
        return "redirect:/read";
    }
	
	dependecies:
	
	spring security 
	mysql driver
	spring data jpa
	thymeleaf 
	spring web
